<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Emerald.Application</name>
    </assembly>
    <members>
        <member name="M:Emerald.Application.Controllers.AuthenticationController.Login(Emerald.Application.Models.Bindings.AuthenticationLoginRequest)">
            <summary>
            Get a new token by credentials
            </summary>
            <param name="binding"></param>
            <returns></returns>
        </member>
        <member name="M:Emerald.Application.Controllers.AuthenticationController.Create(Emerald.Application.Models.Bindings.AuthenticationRegisterRequest)">
            <summary>
            Create a new user
            </summary>
            <param name="binding"></param>
            <returns></returns>
        </member>
        <member name="M:Emerald.Application.Controllers.AuthenticationController.Renew">
            <summary>
            Get new token by old token
            </summary>
            <returns></returns>
        </member>
        <member name="M:Emerald.Application.Controllers.AuthenticationController.InvalidateMessagingToken(System.String,Emerald.Infrastructure.Repositories.IUserRepository)">
            <summary>
            Remove a messaging token from current containing user
            </summary>
            <param name="messagingToken"></param>
            <returns></returns>
        </member>
        <member name="M:Emerald.Application.Controllers.ChatController.Get(MongoDB.Bson.ObjectId,System.Int32,Microsoft.Extensions.Configuration.IConfiguration,Emerald.Application.Services.IUserService,Emerald.Domain.Repositories.IChatMessageRepository,Emerald.Domain.Repositories.IChatRepository,Emerald.Application.Services.Factories.ChatMessageModelFactory,Emerald.Application.Services.Factories.ChatModelFactory)">
            <summary>
            Get a pack of messages between the authorized user and a another user
            </summary>
            <param name="userId"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Emerald.Application.Controllers.ChatController.Query(Emerald.Domain.Repositories.IChatRepository,Emerald.Application.Services.IUserService,Emerald.Application.Services.Factories.ChatModelFactory)">
            <summary>
            Query information about all active chats
            </summary>
            <returns></returns>
        </member>
        <member name="M:Emerald.Application.Controllers.ChatController.SendText(Emerald.Application.Models.Request.Chat.ChatSendTextRequest,Emerald.Domain.Repositories.IChatMessageRepository,Emerald.Application.Services.IUserService,Emerald.Infrastructure.Repositories.IUserRepository,Emerald.Application.Services.Factories.ChatMessageModelFactory,Emerald.Domain.Repositories.IChatRepository)">
            <summary>
            Send a text chat message to a user
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Emerald.Application.Controllers.ChatController.SendImage(Emerald.Application.Models.Request.Chat.ChatSendImageRequest,Emerald.Infrastructure.Services.IImageService,Emerald.Infrastructure.Services.ISafeSearchService,Emerald.Domain.Repositories.IChatMessageRepository,Emerald.Application.Services.IUserService,Emerald.Infrastructure.Repositories.IUserRepository,Emerald.Application.Services.Factories.ChatMessageModelFactory,Emerald.Domain.Repositories.IChatRepository)">
            <summary>
            Send a image chat message to a user
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Emerald.Application.Controllers.ImageController.Get(System.String)">
            <summary>
            Retrive images by imageid
            </summary>
            <returns></returns>
        </member>
        <member name="M:Emerald.Application.Controllers.ImageController.Test(Microsoft.AspNetCore.Http.IFormFile,Emerald.Infrastructure.Services.ISafeSearchService)">
            <summary>
            Upload a image for testing purposes
            </summary>
            <returns></returns>
        </member>
        <member name="M:Emerald.Application.Controllers.Quest.QuestController.Query(Emerald.Application.Models.Response.Quest.QuestQueryRequest)">
            <summary>
            Query quests based on specified settings without tracker information
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Emerald.Application.Controllers.Quest.QuestCreateController.Query(System.Int32,Microsoft.Extensions.Configuration.IConfiguration,Emerald.Application.Services.IUserService,Emerald.Infrastructure.Repositories.IQuestRepository,Emerald.Application.Services.Factories.QuestPrototypeModelFactory)">
            <summary>
            Query all quests created by the authorized user with special creator information
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Emerald.Application.Controllers.Quest.QuestCreateController.Create(Emerald.Application.Models.Request.Quest.QuestCreateCreateRequest,Emerald.Application.Services.IUserService,Emerald.Infrastructure.Repositories.IQuestRepository,Emerald.Domain.Repositories.IQuestPrototypeRepository)">
            <summary>
            Create new quest together with a new questprototype
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Emerald.Application.Controllers.Quest.QuestCreateController.Delete(MongoDB.Bson.ObjectId,Emerald.Infrastructure.Repositories.IComponentRepository,Emerald.Domain.Repositories.IModuleRepository,Emerald.Infrastructure.Repositories.IQuestRepository,Emerald.Infrastructure.Repositories.ITrackerRepository,Emerald.Application.Services.IUserService)">
            <summary>
            Delete a quest if owned by authorized user
            </summary>
            <param name="questId"></param>
            <returns></returns>
        </member>
        <member name="M:Emerald.Application.Controllers.Quest.QuestCreateController.Get(MongoDB.Bson.ObjectId,Emerald.Infrastructure.Repositories.IQuestRepository,Emerald.Domain.Repositories.IQuestPrototypeRepository)">
            <summary>
            Query all information about a single by the authorized user created quest
            </summary>
            <param name="questId"></param>
            <returns></returns>
        </member>
        <member name="M:Emerald.Application.Controllers.Quest.QuestCreateController.Put(Emerald.Application.Models.Request.Quest.QuestCreatePutRequest,Emerald.Infrastructure.Repositories.IQuestRepository,Emerald.Domain.Repositories.IQuestPrototypeRepository,Emerald.Infrastructure.Services.IImageIndexService,Emerald.Infrastructure.Services.IImageService)">
            <summary>
            Update a prototype of a quest. The Quest has to be queried before with create/query
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Emerald.Application.Controllers.Quest.QuestCreateController.Publish(Emerald.Application.Models.Request.Quest.QuestCreatePublishRequest,Emerald.Domain.Repositories.IModuleRepository,Emerald.Infrastructure.Repositories.ITrackerRepository,Emerald.Infrastructure.Repositories.IComponentRepository,Emerald.Infrastructure.Repositories.IQuestRepository,Emerald.Domain.Repositories.IQuestPrototypeRepository,Emerald.Domain.Services.QuestCreateService)">
            <summary>
            Publish the development version of a quest to make it stable
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Emerald.Application.Controllers.QuestPlayController.Query(Emerald.Application.Models.Request.QuestPlayQueryRequest)">
            <summary>
            Query based on specified settings already tracked quests
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Emerald.Application.Controllers.QuestPlayController.Create(Emerald.Application.Models.Request.Quest.QuestPlayCreateRequest)">
            <summary>
            Create a quest tracker for a single quest. Use to start playing a quest
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Emerald.Application.Controllers.QuestPlayController.Vote(Emerald.Application.Models.Request.Quest.QuestPlayVoteRequest)">
            <summary>
            Set voting by tracker for a quest if not already done
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Emerald.Application.Controllers.QuestPlayController.Reset(MongoDB.Bson.ObjectId)">
            <summary>
            Deletes all trackernodes and updates tracker to newest quest version
            </summary>
            <param name="trackerId"></param>
            <returns></returns>
        </member>
        <member name="M:Emerald.Application.Controllers.QuestPlayController.QueryTrackerNodes(MongoDB.Bson.ObjectId,Emerald.Infrastructure.Repositories.IQuestRepository,Emerald.Application.Services.Factories.QuestModelFactory)">
            <summary>
            Query trackernodes with all module and memento information for a single playing quest
            </summary>
            <returns></returns>
        </member>
        <member name="M:Emerald.Application.Controllers.QuestPlayController.HandleEvent(Emerald.Application.Models.Quest.Events.PositionRequestEventModel)">
            <summary>
            Trigger position event with a location value
            </summary>
            <param name="positionRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Emerald.Application.Controllers.QuestPlayController.HandleEvent(Emerald.Application.Models.Quest.Events.ChoiceRequestEventModel)">
            <summary>
            Trigger choice event with a integer choice value
            </summary>
            <param name="choiceEvent"></param>
            <returns></returns>
        </member>
        <member name="M:Emerald.Application.Controllers.UserController.UpdateMessagingToken(System.String,Emerald.Infrastructure.Repositories.IUserRepository,Emerald.Application.Services.IUserService)">
            <summary>
            Set FCM cloud messaging token
            </summary>
            <param name="messagingToken"></param>
            <returns></returns>
        </member>
        <member name="M:Emerald.Application.Controllers.UserController.UpdateProfileImage(System.String,Emerald.Infrastructure.Services.IImageService,Emerald.Infrastructure.Services.ISafeSearchService,Emerald.Application.Services.IUserService)">
            <summary>
            Change profile picture of authorized user
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:Emerald.Application.Controllers.UserController.Me">
            <summary>
            Get profile information about current authorized user
            </summary>
            <returns></returns>
        </member>
        <member name="M:Emerald.Application.Controllers.UserController.Get(MongoDB.Bson.ObjectId)">
            <summary>
            Get profile information about another user
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
